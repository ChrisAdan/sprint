{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.7", "generated_at": "2025-08-11T14:17:28.792812Z", "invocation_id": "95fdf5b8-6bd7-4867-b09c-6d32f5df1342", "invocation_started_at": "2025-08-11T14:17:26.035388Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:26.605733Z", "completed_at": "2025-08-11T14:17:26.630575Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:26.631304Z", "completed_at": "2025-08-11T14:17:26.788732Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19390487670898438, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.country_monthly_playtime", "compiled": true, "compiled_code": "\n\nwith sessions as (\n    select\n        p.country,\n        date_trunc('month', s.eventDateTime::timestamp) as year_month,\n        eventLengthSeconds as session_seconds\n    from \"synthetic\".\"sprint_stage\".\"fact_session\" s\n    join \"synthetic\".\"sprint_dim\".\"dim_players\" p on s.playerId = p.playerId\n),\n\nmonthly_agg as (\n    select\n        country,\n        year_month,\n        sum(session_seconds) as total_play_time_seconds\n    from sessions\n    group by country, year_month\n)\n\nselect * from monthly_agg", "relation_name": "\"synthetic\".\"sprint_mart\".\"country_monthly_playtime\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:26.614568Z", "completed_at": "2025-08-11T14:17:26.641674Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:26.647478Z", "completed_at": "2025-08-11T14:17:26.798745Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1996297836303711, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.country_weekly_revenue", "compiled": true, "compiled_code": "\n\nwith transactions as (\n    select\n        p.country,\n        date_trunc('week', t.eventDateTime::timestamp) as year_week,\n        round(sum(t.purchasePrice), 2) as total_revenue\n    from \"synthetic\".\"sprint_raw\".\"event_transaction\" t\n    join \"synthetic\".\"sprint_dim\".\"dim_players\" p on t.playerId = p.playerId\n\n    group by p.country, year_week\n)\nselect * from transactions", "relation_name": "\"synthetic\".\"sprint_mart\".\"country_weekly_revenue\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:26.626859Z", "completed_at": "2025-08-11T14:17:26.661515Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:26.662763Z", "completed_at": "2025-08-11T14:17:26.842766Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2407517433166504, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.player_activity_daily", "compiled": true, "compiled_code": "\n\nwith sessions as (\n    select\n        playerId as player_id,\n        date_trunc('day'::varchar, eventDateTime::timestamp) as calendar_date,\n        eventLengthSeconds,\n        kills,\n        deaths\n    from \"synthetic\".\"sprint_stage\".\"fact_session\"\n\n    \n      where date_trunc('day'::varchar, eventDateTime::timestamp) > (\n        select max(calendar_date) from \"synthetic\".\"sprint_mart\".\"player_activity_daily\"\n      )\n    \n),\n\ndaily_agg as (\n    select\n        player_id,\n        calendar_date,\n        sum(eventLengthSeconds) as total_play_time_seconds,\n        count(*) as sessions_count,\n        sum(kills) as total_kills,\n        sum(deaths) as total_deaths,\n        case \n          when sum(deaths) = 0 then null\n          else round(cast(sum(kills) as float) / sum(deaths), 2)\n        end as kill_death_ratio\n    from sessions\n    group by player_id, calendar_date\n)\n\nselect * from daily_agg", "relation_name": "\"synthetic\".\"sprint_mart\".\"player_activity_daily\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:26.827451Z", "completed_at": "2025-08-11T14:17:26.831523Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:26.832099Z", "completed_at": "2025-08-11T14:17:26.885669Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06563043594360352, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.player_stats_lifetime", "compiled": true, "compiled_code": "\n\nwith player_stats as (\n    select\n        country,\n        playerId as player_id,\n        sum(kills) as total_kills,\n        sum(deaths) as total_deaths,\n        min(eventDateTime) as first_played,\n        max(eventDateTime) as last_played\n    from \"synthetic\".\"sprint_stage\".\"fact_session\"\n    group by country, player_id\n),\n\nstats_with_ratio as (\n    select\n        country,\n        player_id,\n        total_kills,\n        total_deaths,\n        case when total_deaths = 0 then null else total_kills*1.0/total_deaths end as kill_death_ratio,\n        first_played,\n        last_played\n    from player_stats\n)\n\nselect * from stats_with_ratio", "relation_name": "\"synthetic\".\"sprint_mart\".\"player_stats_lifetime\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:26.804419Z", "completed_at": "2025-08-11T14:17:26.820055Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:26.821277Z", "completed_at": "2025-08-11T14:17:26.889374Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08991575241088867, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.player_consecutive_days_monthly", "compiled": true, "compiled_code": "\n\nwith player_days as (\n    select distinct\n        playerId as player_id,\n        date_trunc('day', eventDateTime::timestamp) as play_date,\n        date_trunc('month', eventDateTime::timestamp) as year_month,\n        country\n    from \"synthetic\".\"sprint_stage\".\"fact_session\"\n),\n\nranked_days as (\n    select\n        player_id,\n        year_month,\n        play_date,\n        country,\n        row_number() over (partition by player_id, year_month order by play_date) as rn\n    from player_days\n),\n\ngroups as (\n    select\n        player_id,\n        year_month,\n        play_date,\n        country,\n        rn,\n        date_diff('day', date '1970-01-01', play_date) - rn as grp\n    from ranked_days\n),\n\nstreaks as (\n    select\n        player_id,\n        year_month,\n        country,\n        grp,\n        count(*) as consecutive_days\n    from groups\n    group by player_id, year_month, country, grp\n),\n\nmax_streaks as (\n    select\n        player_id,\n        year_month,\n        country,\n        max(consecutive_days) as max_consecutive_days_played\n    from streaks\n    group by player_id, year_month, country\n)\n\nselect * from max_streaks", "relation_name": "\"synthetic\".\"sprint_mart\".\"player_consecutive_days_monthly\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:26.617449Z", "completed_at": "2025-08-11T14:17:26.668468Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:26.684362Z", "completed_at": "2025-08-11T14:17:27.352814Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7607944011688232, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.event_heartbeat", "compiled": true, "compiled_code": "\n\nwith source as (\n    select rawResponse\n    from \"synthetic\".\"sprint_raw\".\"event_session\"\n    \n      -- Only get sessions newer than what we've already processed\n      where (rawResponse->>'$.endTime')::timestamp\n            > (select max(event_datetime) from \"synthetic\".\"sprint_stage\".\"event_heartbeat\")\n    \n),\n\nexpanded as (\n    select \n        (hb.value->>'$.sessionId')::varchar       as session_id,\n        (hb.value->>'$.timestamp')::timestamp       as event_datetime,\n        (hb.value->>'$.playerId')::varchar          as player_id,\n        (hb.value->>'$.teamId')::varchar            as team_id,\n        (hb.value->>'$.positionX')::float           as position_x,\n        (hb.value->>'$.positionY')::float           as position_y,\n        (hb.value->>'$.positionZ')::float           as position_z\n    from source,\n         json_each(rawResponse->'$.heartbeats') as hb\n)\n\nselect\n    *,\n    now()::timestamp as createdAt\nfrom expanded", "relation_name": "\"synthetic\".\"sprint_stage\".\"event_heartbeat\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:27.367423Z", "completed_at": "2025-08-11T14:17:27.370344Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:27.370619Z", "completed_at": "2025-08-11T14:17:27.404143Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03808760643005371, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.stage_centroids", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        session_id,\n        team_id,\n        event_datetime,\n        position_x,\n        position_y,\n        position_z\n    from \"synthetic\".\"sprint_stage\".\"event_heartbeat\"\n\n    \n      where event_datetime > (select max(event_datetime) from \"synthetic\".\"sprint_stage\".\"stage_centroids\")\n    \n\n),\n\ncentroids as (\n\n    select\n        session_id,\n        team_id,\n        event_datetime,\n        avg(position_x) as centroid_x,\n        avg(position_y) as centroid_y,\n        avg(position_z) as centroid_z\n    from source\n    group by session_id, team_id, event_datetime\n\n)\n\nselect\n    session_id::string      as session_id,\n    team_id::string         as team_id,\n    event_datetime::timestamp as event_datetime,\n    centroid_x::float       as centroid_x,\n    centroid_y::float       as centroid_y,\n    centroid_z::float       as centroid_z,\n    now()::timestamp        as createdAt\nfrom centroids", "relation_name": "\"synthetic\".\"sprint_stage\".\"stage_centroids\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:27.408183Z", "completed_at": "2025-08-11T14:17:27.413385Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:27.413753Z", "completed_at": "2025-08-11T14:17:28.649147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2800161838531494, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.stage_encounters", "compiled": true, "compiled_code": "\n\n\n\nwith team_pairs as (\n    select\n        a.session_id,\n        a.event_datetime,\n        a.team_id as team_1_id,\n        b.team_id as team_2_id,\n        sqrt(\n            power(a.centroid_x - b.centroid_x, 2) +\n            power(a.centroid_y - b.centroid_y, 2) +\n            power(a.centroid_z - b.centroid_z, 2)\n        ) as distance\n    from \"synthetic\".\"sprint_stage\".\"stage_centroids\" a\n    join \"synthetic\".\"sprint_stage\".\"stage_centroids\" b\n      on a.session_id = b.session_id\n     and a.event_datetime = b.event_datetime\n     and a.team_id < b.team_id\n),\n\ndistance_flags as (\n    select\n        *,\n        case when distance <= 50 then 1 else 0 end as is_close\n    from team_pairs\n),\n\nordered as (\n    select\n        *,\n        lag(is_close) over (partition by session_id, team_1_id, team_2_id order by event_datetime) as prev_is_close,\n        lag(event_datetime) over (partition by session_id, team_1_id, team_2_id order by event_datetime) as prev_event_datetime\n    from distance_flags\n),\n\n-- Mark boundaries of new groups when:\n-- 1) This is the first row (prev_is_close is null), OR\n-- 2) Previous was not close AND current is close (encounter starts), OR\n-- 3) Gap between this and previous event is > cooldown and previous was not close (long break)\ngroup_boundaries as (\n    select\n        *,\n        case \n          when prev_is_close is null then 1\n          when is_close = 1 and prev_is_close = 0 then 1\n          when extract(epoch from event_datetime - prev_event_datetime) > 180 and prev_is_close = 0 then 1\n          else 0\n        end as new_group_flag\n    from ordered\n),\n\ngrouped as (\n    select\n        *,\n        sum(new_group_flag) over (partition by session_id, team_1_id, team_2_id order by event_datetime rows unbounded preceding) as encounter_group\n    from group_boundaries\n),\n\n-- Filter only rows inside encounters (is_close=1) or within cooldown after encounter ended\n-- Because we want to include the cooldown period after last close heartbeat as part of encounter duration\nfinal_encounter as (\n    select\n        session_id,\n        team_1_id,\n        team_2_id,\n        encounter_group,\n        event_datetime,\n        is_close,\n        lead(event_datetime) over (partition by session_id, team_1_id, team_2_id, encounter_group order by event_datetime) as next_event_datetime\n    from grouped\n    where encounter_group > 0\n),\n\n-- Calculate encounter window start and end times\nencounter_windows as (\n    select\n        session_id,\n        team_1_id,\n        team_2_id,\n        encounter_group,\n        min(event_datetime) as encounter_start,\n        -- Extend encounter end by cooldown seconds after last close heartbeat\n        max(\n            case \n                when next_event_datetime is null then event_datetime + interval '180 seconds'\n                else next_event_datetime\n            end\n        ) as encounter_end\n    from final_encounter\n    group by session_id, team_1_id, team_2_id, encounter_group\n),\n\n-- Remove encounters with zero or negative duration (just in case)\ncleaned_encounters as (\n    select\n        session_id,\n        team_1_id,\n        team_2_id,\n        encounter_start,\n        encounter_end\n    from encounter_windows\n    where encounter_end > encounter_start\n)\n\nselect * from cleaned_encounters\n\n", "relation_name": "\"synthetic\".\"sprint_stage\".\"stage_encounters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:28.690871Z", "completed_at": "2025-08-11T14:17:28.694341Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:28.694846Z", "completed_at": "2025-08-11T14:17:28.751672Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06341934204101562, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.encounter_summary_daily", "compiled": true, "compiled_code": "\n\nwith encounters as (\n    select\n        session_id,\n        team_1_id,\n        team_2_id,\n        encounter_start,\n        encounter_end,\n        date(encounter_start) as calendar_day\n    from \"synthetic\".\"sprint_stage\".\"stage_encounters\"\n)\n\nselect\n    session_id,\n    team_1_id,\n    team_2_id,\n    calendar_day,\n    count(*) as daily_encounter_count,\n    sum(datediff('second', encounter_start, encounter_end)) as total_encounter_seconds\nfrom encounters\ngroup by session_id, team_1_id, team_2_id, calendar_day", "relation_name": "\"synthetic\".\"sprint_mart\".\"encounter_summary_daily\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-11T14:17:28.756043Z", "completed_at": "2025-08-11T14:17:28.758041Z"}, {"name": "execute", "started_at": "2025-08-11T14:17:28.758328Z", "completed_at": "2025-08-11T14:17:28.785329Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031220197677612305, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sprint.session_close_encounters_daily", "compiled": true, "compiled_code": "\n\nwith encounters as (\n    select\n        session_id,\n        date_trunc('day', calendar_day::timestamp) as calendar_day,\n        sum(daily_encounter_count) as close_encounter_count,\n        sum(total_encounter_seconds) total_encounter_seconds\n    from \"synthetic\".\"sprint_mart\".\"encounter_summary_daily\"\n    group by session_id, calendar_day\n)\n\nselect * from encounters", "relation_name": "\"synthetic\".\"sprint_mart\".\"session_close_encounters_daily\"", "batch_results": null}], "elapsed_time": 2.3244147300720215, "args": {"print": true, "require_explicit_package_overrides_for_builtin_materializations": true, "exclude": [], "select": [], "indirect_selection": "eager", "state_modified_compare_more_unrendered_values": false, "log_path": "/home/cadan/programming/engineering/sprint/dbt_project/logs", "write_json": true, "use_colors_file": true, "require_nested_cumulative_type_params": false, "require_all_warnings_handled_by_warn_error": false, "require_batched_execution_for_custom_microbatch_strategy": false, "require_resource_names_without_spaces": true, "skip_nodes_if_on_run_start_fails": false, "vars": {}, "which": "run", "static_parser": true, "strict_mode": false, "populate_cache": true, "partial_parse_file_diff": true, "introspect": true, "use_fast_test_edges": false, "version_check": true, "printer_width": 80, "show_all_deprecations": false, "upload_to_artifacts_ingest_api": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "log_format": "default", "invocation_command": "dbt run", "quiet": false, "partial_parse": true, "favor_state": false, "use_colors": true, "profiles_dir": "/home/cadan/.dbt", "log_level": "info", "defer": false, "cache_selected_only": false, "require_yaml_configuration_for_mf_time_spines": false, "macro_debugging": false, "empty": false, "validate_macro_args": false, "show_resource_report": false, "require_generic_test_arguments_property": false, "source_freshness_run_project_hooks": true, "state_modified_compare_vars": false, "send_anonymous_usage_stats": true, "project_dir": "/home/cadan/programming/engineering/sprint/dbt_project", "log_level_file": "debug", "log_file_max_bytes": 10485760, "log_format_file": "debug"}}